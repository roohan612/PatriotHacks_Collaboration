import pygame
import math

pygame.init()

class body_t:
    def __init__(self : "body_t", surface : pygame.Surface, pos : pygame.Vector2 = pygame.Vector2(0.0, 0.0), angle : float = 0.0) -> None:
        self.surface : pygame.Surface = surface,
        self.pos : pygame.Vector2 = pos
        self.angle : float = angle



player_image = pygame.image.load("main_character.png")
PLAYER_SIZE = (38, 62)

WINDOW_SIZE = (640, 640)
window = pygame.display.set_mode(WINDOW_SIZE)
draw_surface = pygame.Surface((64, 64))


arm_image = pygame.image.load("main_character_right_arm.png")
arm_pos = pygame.Vector2(0.0, 0.0)
arm_dir = pygame.Vector2(arm_image.get_rect().w, arm_image.get_rect().h)


def dist_sqrd(v1, v2) -> float:
    return (v2[0] - v1[0]) ** 2 + (v2[1] - v1[1]) ** 2


while True:
    [exit(0) for event in pygame.event.get() if event.type == pygame.QUIT]
    draw_surface.fill((100, 100, 0))  

    mouse_buttons = pygame.mouse.get_pressed()
    mouse_pos = pygame.Vector2(pygame.mouse.get_pos()[0] // 10, pygame.mouse.get_pos()[1] // 10)
    if mouse_buttons[0]:
        if dist_sqrd(mouse_pos, arm_pos) < 4:
            arm_pos[0] = mouse_pos[0] 
            arm_pos[1] = mouse_pos[1] 
        elif dist_sqrd(mouse_pos, arm_dir) < 4:
            arm_dir[0] = mouse_pos[0] 
            arm_dir[1] = mouse_pos[1] 
        
    
    draw_surface.blit(player_image, (0, 0))
    draw_surface.blit(pygame.transform.rotate(arm_image, math.atan2(arm_dir.y - arm_pos.y, arm_dir.y - arm_pos.y) * 180 / math.pi), arm_pos)

    pygame.draw.circle(draw_surface, (255, 0, 0), arm_pos, 2, 1)
    pygame.draw.circle(draw_surface, (255, 0, 0), arm_dir, 2, 1)

    window.blit(pygame.transform.scale(draw_surface, WINDOW_SIZE), (0, 0))
    pygame.display.update()