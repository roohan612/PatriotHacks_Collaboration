import pygame
import time
import random

pygame.init()

class player_t: 
    PLAYER_IMAGE_DIR : str = "assets2\\player.png"
    PLAYER_IMAGE : pygame.Surface = pygame.image.load(PLAYER_IMAGE_DIR)

    player_animation_rect : pygame.Rect = pygame.Rect(0, 0, 26, 32)
    animation_duration : float = 0.5
    animation_timestamp : float = 0.0

    jump_cooldown_duration : float = 0.1
    jump_cooldown_timestamp : float = 0.0
    GRAVITY : float = 8.0
    JUMP_VELOCITY : float = -0.5

    buildings_passed : int = 0
    alive : bool = True

    def __init__(self : "player_t") -> None:
        self.rect = pygame.Rect(64, 144, 26, 32)
        self.y_velocity : float = 0.0


    def render(self : "player_t", surf : pygame.Surface) -> None:
        surf.blit(self.PLAYER_IMAGE, self.rect, self.player_animation_rect)


    def controls(self : "player_t", time : float) -> None:
        keys = pygame.key.get_pressed()
        if keys[pygame.K_SPACE] and time > self.jump_cooldown_timestamp:
            self.jump_cooldown_timestamp = time + self.jump_cooldown_duration
            self.y_velocity = self.JUMP_VELOCITY


    def update(self : "player_t", time : float, delta_time : float, draw_surface_height) -> None:
        if(time > self.animation_timestamp):
            self.animation_timestamp = time + self.animation_duration
            self.player_animation_rect.y = (self.player_animation_rect.y + 32) % 128

        self.y_velocity += self.GRAVITY * delta_time
        self.rect.y += self.y_velocity

        if self.rect.top > 512:
            self.alive = False
        
class obstacle_t:
    BUILDING_IMAGE_DIR : str = "assets2\\building.png"
    BUILDING_IMAGE : pygame.Surface = pygame.transform.scale(pygame.image.load(BUILDING_IMAGE_DIR), (64, 256))

    BUILDING_VELOCITY : float = 1.0
    def __init__(self : "obstacle_t") -> None:
        self.rect = self.BUILDING_IMAGE.get_rect()
        self.rect.x = 512
        self.rect.y = random.randrange(48, 272 - 32)

    def update(self : "obstacle_t", delta_time : float) -> None:
        self.rect.x -= self.BUILDING_VELOCITY * delta_time
        
class obstacle_manager_t:
    def __init__(self : "obstacle_manager_t") -> None:
        self.obstacles = [obstacle_t()]

    def update(self : "obstacle_manager_t", delta_time : float) -> None:
        for i in range(len(self.obstacles) - 1, -1, -1):
            self.obstacles[i].update(delta_time)
            if(self.obstacles[i].rect.x == 0):
                self.obstacles.pop(i)
                self.obstacles.append(obstacle_t())
                player_t.buildings_passed += 1
    

class app_t:
    BACKGROUND_IMAGE_DIR : str = "assets2\\background.png"
    BACKGROUND_IMAGE : pygame.Surface = pygame.image.load(BACKGROUND_IMAGE_DIR)
    NUMBER_FONT_IMAGE_DIR : str = "assets2\\numbers.png"
    NUMBER_FONT_IMAGE : pygame.Surface = pygame.image.load(NUMBER_FONT_IMAGE_DIR)

    def __init__(self) -> None:
        self.window : pygame.Surface = pygame.display.set_mode()
        self.WINDOW_SIZE : tuple[int, int] = self.window.get_size()
        self.DRAW_SURFACE_SIZE : tuple[int, int] = (512, 288)
        self.draw_surface : pygame.Surface = pygame.Surface(self.DRAW_SURFACE_SIZE)

        pygame.display.set_caption("exploint")

        self.player : player_t = player_t()

        self.obstacle_manager = obstacle_manager_t()

        self.time : float = time.time()
        self.delta_time : float = 0.0

    def run(self : "app_t") -> None:
        while self.player.alive:
            self.update_time() 
            self.player.update(self.time, self.delta_time, self.DRAW_SURFACE_SIZE[1])
            self.player.controls(self.time)
            self.obstacle_manager.update(self.delta_time)
            self.poll_events()
            self.clear()

            number = self.render_numbers(self.player.buildings_passed)
            self.draw_surface.blit(number, (0, 0))
            self.player.render(self.draw_surface)

            for o in self.obstacle_manager.obstacles:
                self.draw_surface.blit(obstacle_t.BUILDING_IMAGE, o.rect)
                if o.rect.colliderect(self.player.rect):
                    self.player.alive = False
            self.update()



    def poll_events(self : "app_t") -> None:
        [exit(0) for event in pygame.event.get() if event.type == pygame.QUIT]


    
    def clear(self : "app_t") -> None:
        self.draw_surface.blit(self.BACKGROUND_IMAGE, (0, 0))
    


    def update(self : "app_t") -> None:
        self.window.blit(pygame.transform.scale(self.draw_surface, self.WINDOW_SIZE), (0, 0))
        pygame.display.update()
    

    def update_time(self : "app_t") -> None:
        new_time : float = time.time()
        self.delta_time = new_time - self.time
        self.time = new_time


    def render_numbers(self : "app_t", numbers : int) -> pygame.Surface:
        str_numbers : str = str(numbers)
        width : int = len(str_numbers) * 7
        height : int = 7
        surface : pygame.Surface = pygame.Surface((width, height))
        surface.set_colorkey((0, 0, 0))
        for i in range(len(str_numbers)):
            surface.blit(self.NUMBER_FONT_IMAGE, (i * 7, 0), pygame.Rect(int(str_numbers[i]) * 7, 0, 7, 7))
        return surface



if __name__ == "__main__":

    app = app_t()
    app.run()